// This file would typically be generated by the Supabase CLI using:
// `supabase gen types typescript --project-id "your-project-id" > src/lib/types.ts`
// For now, we'll provide a minimal structure.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string;
          first_name: string | null;
          last_name: string | null;
          avatar_url: string | null;
        };
        Insert: {
          id: string;
          first_name?: string | null;
          last_name?: string | null;
          avatar_url?: string | null;
        };
        Update: {
          id?: string;
          first_name?: string | null;
          last_name?: string | null;
          avatar_url?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: "profiles_id_fkey";
            columns: ["id"];
            isOneToOne: true;
            referencedRelation: "users";
            referencedColumns: ["id"];
          },
        ];
      };
      // Add other tables as needed, or generate this file from your Supabase project
      tasks: {
        Row: {
          id: string;
          description: string;
          status: string;
          created_at: string;
          user_id: string;
          priority: string | null;
          due_date: string | null;
          notes: string | null;
          remind_at: string | null;
          section_id: string | null;
          order: number | null;
          parent_task_id: string | null;
          recurring_type: string | null;
          original_task_id: string | null;
          category: string | null;
          link: string | null;
          image_url: string | null;
          updated_at: string | null;
        };
        Insert: {
          id?: string;
          description: string;
          status?: string;
          created_at?: string;
          user_id: string;
          priority?: string | null;
          due_date?: string | null;
          notes?: string | null;
          remind_at?: string | null;
          section_id?: string | null;
          order?: number | null;
          parent_task_id?: string | null;
          recurring_type?: string | null;
          original_task_id?: string | null;
          category?: string | null;
          link?: string | null;
          image_url?: string | null;
          updated_at?: string | null;
        };
        Update: {
          id?: string;
          description?: string;
          status?: string;
          created_at?: string;
          user_id?: string;
          priority?: string | null;
          due_date?: string | null;
          notes?: string | null;
          remind_at?: string | null;
          section_id?: string | null;
          order?: number | null;
          parent_task_id?: string | null;
          recurring_type?: string | null;
          original_task_id?: string | null;
          category?: string | null;
          link?: string | null;
          image_url?: string | null;
          updated_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: "tasks_category_fkey";
            columns: ["category"];
            isOneToOne: false;
            referencedRelation: "task_categories";
            referencedColumns: ["id"];
          },
          {
            foreignKeyName: "tasks_parent_task_id_fkey";
            columns: ["parent_task_id"];
            isOneToOne: false;
            referencedRelation: "tasks";
            referencedColumns: ["id"];
          },
          {
            foreignKeyName: "tasks_section_id_fkey";
            columns: ["section_id"];
            isOneToOne: false;
            referencedRelation: "task_sections";
            referencedColumns: ["id"];
          },
          {
            foreignKeyName: "tasks_user_id_fkey";
            columns: ["user_id"];
            isOneToOne: false;
            referencedRelation: "users";
            referencedColumns: ["id"];
          },
        ];
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      global_search: {
        Args: {
          search_term: string;
        };
        Returns: {
          id: string;
          type: string;
          title: string;
          description: string;
          link: string;
          created_at: string;
        }[];
      };
      get_user_tasks_with_sections: {
        Args: Record<PropertyKey, never>;
        Returns: {
          section_id: string;
          section_name: string;
          section_order: number;
          section_include_in_focus_mode: boolean;
          section_created_at: string;
          task_id: string;
          task_description: string;
          task_status: string;
          task_created_at: string;
          task_priority: string;
          task_due_date: string;
          task_notes: string;
          task_remind_at: string;
          task_section_id: string;
          task_order: number;
          task_parent_task_id: string;
          task_recurring_type: string;
          task_original_task_id: string;
          task_category: string;
          task_link: string;
          task_image_url: string;
        }[];
      };
      update_custom_dashboard_cards_order: {
        Args: {
          updates: Json;
        };
        Returns: void;
      };
      handle_new_user: {
        Args: Record<PropertyKey, never>;
        Returns: string;
      };
      update_sections_order: {
        Args: {
          updates: Json;
        };
        Returns: void;
      };
      get_daily_task_completion_summary: {
        Args: {
          p_user_id: string;
          p_days?: number;
        };
        Returns: {
          completion_date: string;
          completed_tasks_count: number;
        }[];
      };
      update_tasks_order: {
        Args: {
          updates: Json;
        };
        Returns: void;
      };
      create_demo_data: {
        Args: {
          p_user_id: string;
        };
        Returns: void;
      };
      update_quick_links_order: {
        Args: {
          updates: Json;
        };
        Returns: void;
      };
      get_weekly_sleep_efficiency: {
        Args: {
          p_user_id: string;
        };
        Returns: number;
      };
      get_daily_sleep_summary: {
        Args: {
          p_user_id: string;
          p_days?: number;
        };
        Returns: {
          record_date: string;
          total_sleep_minutes: number;
          sleep_efficiency: number;
        }[];
      };
      get_daily_habit_completion_summary: {
        Args: {
          p_user_id: string;
          p_days?: number;
        };
        Returns: {
          completion_date: string;
          completed_habits_count: number;
        }[];
      };
      update_updated_at_column: {
        Args: Record<PropertyKey, never>;
        Returns: string;
      };
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      search_result: {
        id: string;
        type: string;
        title: string;
        description: string;
        link: string;
        created_at: string;
      };
    };
  };
}